// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pool.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanPool = `-- name: CleanPool :exec
DELETE FROM sending_pool_emails 
WHERE email = $1 AND message_id = $2
`

type CleanPoolParams struct {
	Email     string
	MessageID string
}

func (q *Queries) CleanPool(ctx context.Context, arg CleanPoolParams) error {
	_, err := q.db.Exec(ctx, cleanPool, arg.Email, arg.MessageID)
	return err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages
    (message_id, subject, sender_email, sender_alias, template_id, domain, attachments) VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING message_id, subject, sender_email, sender_alias, template_id, domain, attachments
`

type CreateMessageParams struct {
	MessageID   string
	Subject     string
	SenderEmail string
	SenderAlias string
	TemplateID  string
	Domain      string
	Attachments Attachments
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.MessageID,
		arg.Subject,
		arg.SenderEmail,
		arg.SenderAlias,
		arg.TemplateID,
		arg.Domain,
		arg.Attachments,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.Subject,
		&i.SenderEmail,
		&i.SenderAlias,
		&i.TemplateID,
		&i.Domain,
		&i.Attachments,
	)
	return i, err
}

const createPool = `-- name: CreatePool :exec
INSERT INTO sending_pool_emails (email, status, scheduled_time, original_scheduled_time, message_id, fields, domain) VALUES 
    ($1, 'to_validate', $2, $2, $3, $4, $5)
`

type CreatePoolParams struct {
	Email         string
	ScheduledTime pgtype.Timestamp
	MessageID     string
	Fields        CustomFields
	Domain        string
}

func (q *Queries) CreatePool(ctx context.Context, arg CreatePoolParams) error {
	_, err := q.db.Exec(ctx, createPool,
		arg.Email,
		arg.ScheduledTime,
		arg.MessageID,
		arg.Fields,
		arg.Domain,
	)
	return err
}

const getPool = `-- name: GetPool :one
SELECT id, scheduled_time, original_scheduled_time, send_attempts_cnt, email, message_id, fields, status, created_at, domain FROM  sending_pool_emails 
WHERE email = $1 AND message_id = $2
`

type GetPoolParams struct {
	Email     string
	MessageID string
}

func (q *Queries) GetPool(ctx context.Context, arg GetPoolParams) (SendingPoolEmail, error) {
	row := q.db.QueryRow(ctx, getPool, arg.Email, arg.MessageID)
	var i SendingPoolEmail
	err := row.Scan(
		&i.ID,
		&i.ScheduledTime,
		&i.OriginalScheduledTime,
		&i.SendAttemptsCnt,
		&i.Email,
		&i.MessageID,
		&i.Fields,
		&i.Status,
		&i.CreatedAt,
		&i.Domain,
	)
	return i, err
}

const getSendingData = `-- name: GetSendingData :one
SELECT
    t.html,
    m.domain,
    d.dkim_private_key,
    d.dkim_public_key,
    m.subject,
    m.message_id,
    m.sender_email,
    m.sender_alias,
    m.attachments
FROM messages as m
    JOIN templates as t ON t.template_id = m.template_id
    JOIN domains as d ON d.domain = m.domain
    WHERE m.message_id = $1
`

type GetSendingDataRow struct {
	Html           string
	Domain         string
	DkimPrivateKey string
	DkimPublicKey  string
	Subject        string
	MessageID      string
	SenderEmail    string
	SenderAlias    string
	Attachments    Attachments
}

func (q *Queries) GetSendingData(ctx context.Context, messageID string) (GetSendingDataRow, error) {
	row := q.db.QueryRow(ctx, getSendingData, messageID)
	var i GetSendingDataRow
	err := row.Scan(
		&i.Html,
		&i.Domain,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
		&i.Subject,
		&i.MessageID,
		&i.SenderEmail,
		&i.SenderAlias,
		&i.Attachments,
	)
	return i, err
}

const getSendingPoolsEmails = `-- name: GetSendingPoolsEmails :many
SELECT id, scheduled_time, original_scheduled_time, send_attempts_cnt, email, message_id, fields, status, created_at, domain FROM sending_pool_emails WHERE message_id = $1 LIMIT $2 OFFSET $3
`

type GetSendingPoolsEmailsParams struct {
	MessageID string
	Limit     int32
	Offset    int32
}

func (q *Queries) GetSendingPoolsEmails(ctx context.Context, arg GetSendingPoolsEmailsParams) ([]SendingPoolEmail, error) {
	rows, err := q.db.Query(ctx, getSendingPoolsEmails, arg.MessageID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SendingPoolEmail
	for rows.Next() {
		var i SendingPoolEmail
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledTime,
			&i.OriginalScheduledTime,
			&i.SendAttemptsCnt,
			&i.Email,
			&i.MessageID,
			&i.Fields,
			&i.Status,
			&i.CreatedAt,
			&i.Domain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const prepareForSend = `-- name: PrepareForSend :many
UPDATE sending_pool_emails AS sp
    SET status = 'sending'
    FROM (
            SELECT id FROM sending_pool_emails
            WHERE scheduled_time <= NOW() AND status = 'scheduled'
            LIMIT $1
        ) AS t
    WHERE sp.id = t.id
    RETURNING sp.id, sp.scheduled_time, sp.original_scheduled_time, sp.send_attempts_cnt, sp.email, sp.message_id, sp.fields, sp.status, sp.created_at, sp.domain
`

func (q *Queries) PrepareForSend(ctx context.Context, limit int32) ([]SendingPoolEmail, error) {
	rows, err := q.db.Query(ctx, prepareForSend, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SendingPoolEmail
	for rows.Next() {
		var i SendingPoolEmail
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledTime,
			&i.OriginalScheduledTime,
			&i.SendAttemptsCnt,
			&i.Email,
			&i.MessageID,
			&i.Fields,
			&i.Status,
			&i.CreatedAt,
			&i.Domain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const prepareForValidate = `-- name: PrepareForValidate :many
UPDATE sending_pool_emails AS sp
    SET status = 'validating'
    FROM (
            SELECT id FROM sending_pool_emails
            WHERE status = 'to_validate'
            LIMIT $1
        ) AS t
    WHERE sp.id = t.id
    RETURNING sp.id, sp.scheduled_time, sp.original_scheduled_time, sp.send_attempts_cnt, sp.email, sp.message_id, sp.fields, sp.status, sp.created_at, sp.domain
`

func (q *Queries) PrepareForValidate(ctx context.Context, limit int32) ([]SendingPoolEmail, error) {
	rows, err := q.db.Query(ctx, prepareForValidate, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SendingPoolEmail
	for rows.Next() {
		var i SendingPoolEmail
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledTime,
			&i.OriginalScheduledTime,
			&i.SendAttemptsCnt,
			&i.Email,
			&i.MessageID,
			&i.Fields,
			&i.Status,
			&i.CreatedAt,
			&i.Domain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reschedulePool = `-- name: ReschedulePool :exec
UPDATE sending_pool_emails 
SET status='scheduled', scheduled_time =  $1, send_attempts_cnt = send_attempts_cnt + 1 WHERE email = $2 AND message_id = $3
`

type ReschedulePoolParams struct {
	ScheduledTime pgtype.Timestamp
	Email         string
	MessageID     string
}

func (q *Queries) ReschedulePool(ctx context.Context, arg ReschedulePoolParams) error {
	_, err := q.db.Exec(ctx, reschedulePool, arg.ScheduledTime, arg.Email, arg.MessageID)
	return err
}

const setSendingPoolDelivered = `-- name: SetSendingPoolDelivered :exec
UPDATE sending_pool_emails 
	SET status = 'sent' WHERE email = $1 AND message_id = $2
`

type SetSendingPoolDeliveredParams struct {
	Email     string
	MessageID string
}

func (q *Queries) SetSendingPoolDelivered(ctx context.Context, arg SetSendingPoolDeliveredParams) error {
	_, err := q.db.Exec(ctx, setSendingPoolDelivered, arg.Email, arg.MessageID)
	return err
}

const setSendingPoolScheduled = `-- name: SetSendingPoolScheduled :exec
UPDATE sending_pool_emails 
	SET status = 'scheduled' WHERE email = $1 AND message_id = $2
`

type SetSendingPoolScheduledParams struct {
	Email     string
	MessageID string
}

func (q *Queries) SetSendingPoolScheduled(ctx context.Context, arg SetSendingPoolScheduledParams) error {
	_, err := q.db.Exec(ctx, setSendingPoolScheduled, arg.Email, arg.MessageID)
	return err
}
