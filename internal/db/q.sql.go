// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: q.sql

package sqlc

import (
	"context"
)

const createDomain = `-- name: CreateDomain :one
INSERT INTO domains 
    (domain, key, dkim_private_key, dkim_public_key)
    VALUES ($1, $2, $3, $4) 
    RETURNING id, domain, created_at, key, dkim_private_key, dkim_public_key
`

type CreateDomainParams struct {
	Domain         string
	Key            string
	DkimPrivateKey string
	DkimPublicKey  string
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.db.QueryRow(ctx, createDomain,
		arg.Domain,
		arg.Key,
		arg.DkimPrivateKey,
		arg.DkimPublicKey,
	)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}

const findDomain = `-- name: FindDomain :one
SELECT
    id, domain, created_at, key, dkim_private_key, dkim_public_key
FROM domains
    WHERE domain = $1
`

func (q *Queries) FindDomain(ctx context.Context, domain string) (Domain, error) {
	row := q.db.QueryRow(ctx, findDomain, domain)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}

const findDomainWithKey = `-- name: FindDomainWithKey :one
SELECT id, domain, created_at, key, dkim_private_key, dkim_public_key FROM domains
WHERE domain = $1
AND key = $2
`

type FindDomainWithKeyParams struct {
	Domain string
	Key    string
}

func (q *Queries) FindDomainWithKey(ctx context.Context, arg FindDomainWithKeyParams) (Domain, error) {
	row := q.db.QueryRow(ctx, findDomainWithKey, arg.Domain, arg.Key)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}

const findTemplate = `-- name: FindTemplate :one
SELECT id, template_id, html, domain, type, title, created_at, updated_at FROM templates
WHERE template_id = $1
AND domain = $2
`

type FindTemplateParams struct {
	TemplateID string
	Domain     string
}

func (q *Queries) FindTemplate(ctx context.Context, arg FindTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, findTemplate, arg.TemplateID, arg.Domain)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.TemplateID,
		&i.Html,
		&i.Domain,
		&i.Type,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllDomains = `-- name: GetAllDomains :many
SELECT
    id, domain, created_at, key, dkim_private_key, dkim_public_key
FROM domains
`

func (q *Queries) GetAllDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.db.Query(ctx, getAllDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.CreatedAt,
			&i.Key,
			&i.DkimPrivateKey,
			&i.DkimPublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDomains = `-- name: GetDomains :many
SELECT id, domain, created_at, key, dkim_private_key, dkim_public_key FROM domains
`

func (q *Queries) GetDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.db.Query(ctx, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.CreatedAt,
			&i.Key,
			&i.DkimPrivateKey,
			&i.DkimPublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDomainKey = `-- name: SetDomainKey :one
UPDATE domains SET key = $1 WHERE domain = $2 RETURNING id, domain, created_at, key, dkim_private_key, dkim_public_key
`

type SetDomainKeyParams struct {
	Key    string
	Domain string
}

func (q *Queries) SetDomainKey(ctx context.Context, arg SetDomainKeyParams) (Domain, error) {
	row := q.db.QueryRow(ctx, setDomainKey, arg.Key, arg.Domain)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.CreatedAt,
		&i.Key,
		&i.DkimPrivateKey,
		&i.DkimPublicKey,
	)
	return i, err
}
