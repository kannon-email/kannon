// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kannon/stats/apiv1/statsapiv1.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	apiv1 "github.com/ludusrusso/kannon/proto/kannon/stats/apiv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StatsApiV1Name is the fully-qualified name of the StatsApiV1 service.
	StatsApiV1Name = "kannon.StatsApiV1"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StatsApiV1GetStatsProcedure is the fully-qualified name of the StatsApiV1's GetStats RPC.
	StatsApiV1GetStatsProcedure = "/kannon.StatsApiV1/GetStats"
	// StatsApiV1GetStatsAggregatedProcedure is the fully-qualified name of the StatsApiV1's
	// GetStatsAggregated RPC.
	StatsApiV1GetStatsAggregatedProcedure = "/kannon.StatsApiV1/GetStatsAggregated"
)

// StatsApiV1Client is a client for the kannon.StatsApiV1 service.
type StatsApiV1Client interface {
	GetStats(context.Context, *connect.Request[apiv1.GetStatsReq]) (*connect.Response[apiv1.GetStatsRes], error)
	GetStatsAggregated(context.Context, *connect.Request[apiv1.GetStatsAggregatedReq]) (*connect.Response[apiv1.GetStatsAggregatedRes], error)
}

// NewStatsApiV1Client constructs a client for the kannon.StatsApiV1 service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStatsApiV1Client(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StatsApiV1Client {
	baseURL = strings.TrimRight(baseURL, "/")
	statsApiV1Methods := apiv1.File_kannon_stats_apiv1_statsapiv1_proto.Services().ByName("StatsApiV1").Methods()
	return &statsApiV1Client{
		getStats: connect.NewClient[apiv1.GetStatsReq, apiv1.GetStatsRes](
			httpClient,
			baseURL+StatsApiV1GetStatsProcedure,
			connect.WithSchema(statsApiV1Methods.ByName("GetStats")),
			connect.WithClientOptions(opts...),
		),
		getStatsAggregated: connect.NewClient[apiv1.GetStatsAggregatedReq, apiv1.GetStatsAggregatedRes](
			httpClient,
			baseURL+StatsApiV1GetStatsAggregatedProcedure,
			connect.WithSchema(statsApiV1Methods.ByName("GetStatsAggregated")),
			connect.WithClientOptions(opts...),
		),
	}
}

// statsApiV1Client implements StatsApiV1Client.
type statsApiV1Client struct {
	getStats           *connect.Client[apiv1.GetStatsReq, apiv1.GetStatsRes]
	getStatsAggregated *connect.Client[apiv1.GetStatsAggregatedReq, apiv1.GetStatsAggregatedRes]
}

// GetStats calls kannon.StatsApiV1.GetStats.
func (c *statsApiV1Client) GetStats(ctx context.Context, req *connect.Request[apiv1.GetStatsReq]) (*connect.Response[apiv1.GetStatsRes], error) {
	return c.getStats.CallUnary(ctx, req)
}

// GetStatsAggregated calls kannon.StatsApiV1.GetStatsAggregated.
func (c *statsApiV1Client) GetStatsAggregated(ctx context.Context, req *connect.Request[apiv1.GetStatsAggregatedReq]) (*connect.Response[apiv1.GetStatsAggregatedRes], error) {
	return c.getStatsAggregated.CallUnary(ctx, req)
}

// StatsApiV1Handler is an implementation of the kannon.StatsApiV1 service.
type StatsApiV1Handler interface {
	GetStats(context.Context, *connect.Request[apiv1.GetStatsReq]) (*connect.Response[apiv1.GetStatsRes], error)
	GetStatsAggregated(context.Context, *connect.Request[apiv1.GetStatsAggregatedReq]) (*connect.Response[apiv1.GetStatsAggregatedRes], error)
}

// NewStatsApiV1Handler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStatsApiV1Handler(svc StatsApiV1Handler, opts ...connect.HandlerOption) (string, http.Handler) {
	statsApiV1Methods := apiv1.File_kannon_stats_apiv1_statsapiv1_proto.Services().ByName("StatsApiV1").Methods()
	statsApiV1GetStatsHandler := connect.NewUnaryHandler(
		StatsApiV1GetStatsProcedure,
		svc.GetStats,
		connect.WithSchema(statsApiV1Methods.ByName("GetStats")),
		connect.WithHandlerOptions(opts...),
	)
	statsApiV1GetStatsAggregatedHandler := connect.NewUnaryHandler(
		StatsApiV1GetStatsAggregatedProcedure,
		svc.GetStatsAggregated,
		connect.WithSchema(statsApiV1Methods.ByName("GetStatsAggregated")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kannon.StatsApiV1/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StatsApiV1GetStatsProcedure:
			statsApiV1GetStatsHandler.ServeHTTP(w, r)
		case StatsApiV1GetStatsAggregatedProcedure:
			statsApiV1GetStatsAggregatedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStatsApiV1Handler returns CodeUnimplemented from all methods.
type UnimplementedStatsApiV1Handler struct{}

func (UnimplementedStatsApiV1Handler) GetStats(context.Context, *connect.Request[apiv1.GetStatsReq]) (*connect.Response[apiv1.GetStatsRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kannon.StatsApiV1.GetStats is not implemented"))
}

func (UnimplementedStatsApiV1Handler) GetStatsAggregated(context.Context, *connect.Request[apiv1.GetStatsAggregatedReq]) (*connect.Response[apiv1.GetStatsAggregatedRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kannon.StatsApiV1.GetStatsAggregated is not implemented"))
}
