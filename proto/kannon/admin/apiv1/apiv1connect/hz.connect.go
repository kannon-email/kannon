// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kannon/admin/apiv1/hz.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	apiv1 "github.com/kannon-email/kannon/proto/kannon/admin/apiv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HZServiceName is the fully-qualified name of the HZService service.
	HZServiceName = "pkg.kannon.admin.apiv1.HZService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HZServiceHZProcedure is the fully-qualified name of the HZService's HZ RPC.
	HZServiceHZProcedure = "/pkg.kannon.admin.apiv1.HZService/HZ"
)

// HZServiceClient is a client for the pkg.kannon.admin.apiv1.HZService service.
type HZServiceClient interface {
	HZ(context.Context, *connect.Request[apiv1.HZRequest]) (*connect.Response[apiv1.HZResponse], error)
}

// NewHZServiceClient constructs a client for the pkg.kannon.admin.apiv1.HZService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHZServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HZServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hZServiceMethods := apiv1.File_kannon_admin_apiv1_hz_proto.Services().ByName("HZService").Methods()
	return &hZServiceClient{
		hZ: connect.NewClient[apiv1.HZRequest, apiv1.HZResponse](
			httpClient,
			baseURL+HZServiceHZProcedure,
			connect.WithSchema(hZServiceMethods.ByName("HZ")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hZServiceClient implements HZServiceClient.
type hZServiceClient struct {
	hZ *connect.Client[apiv1.HZRequest, apiv1.HZResponse]
}

// HZ calls pkg.kannon.admin.apiv1.HZService.HZ.
func (c *hZServiceClient) HZ(ctx context.Context, req *connect.Request[apiv1.HZRequest]) (*connect.Response[apiv1.HZResponse], error) {
	return c.hZ.CallUnary(ctx, req)
}

// HZServiceHandler is an implementation of the pkg.kannon.admin.apiv1.HZService service.
type HZServiceHandler interface {
	HZ(context.Context, *connect.Request[apiv1.HZRequest]) (*connect.Response[apiv1.HZResponse], error)
}

// NewHZServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHZServiceHandler(svc HZServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hZServiceMethods := apiv1.File_kannon_admin_apiv1_hz_proto.Services().ByName("HZService").Methods()
	hZServiceHZHandler := connect.NewUnaryHandler(
		HZServiceHZProcedure,
		svc.HZ,
		connect.WithSchema(hZServiceMethods.ByName("HZ")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pkg.kannon.admin.apiv1.HZService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HZServiceHZProcedure:
			hZServiceHZHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHZServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHZServiceHandler struct{}

func (UnimplementedHZServiceHandler) HZ(context.Context, *connect.Request[apiv1.HZRequest]) (*connect.Response[apiv1.HZResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.HZService.HZ is not implemented"))
}
