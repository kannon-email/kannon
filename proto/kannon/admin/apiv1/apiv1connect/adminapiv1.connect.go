// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kannon/admin/apiv1/adminapiv1.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	apiv1 "github.com/ludusrusso/kannon/proto/kannon/admin/apiv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiName is the fully-qualified name of the Api service.
	ApiName = "pkg.kannon.admin.apiv1.Api"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiGetDomainsProcedure is the fully-qualified name of the Api's GetDomains RPC.
	ApiGetDomainsProcedure = "/pkg.kannon.admin.apiv1.Api/GetDomains"
	// ApiGetDomainProcedure is the fully-qualified name of the Api's GetDomain RPC.
	ApiGetDomainProcedure = "/pkg.kannon.admin.apiv1.Api/GetDomain"
	// ApiCreateDomainProcedure is the fully-qualified name of the Api's CreateDomain RPC.
	ApiCreateDomainProcedure = "/pkg.kannon.admin.apiv1.Api/CreateDomain"
	// ApiRegenerateDomainKeyProcedure is the fully-qualified name of the Api's RegenerateDomainKey RPC.
	ApiRegenerateDomainKeyProcedure = "/pkg.kannon.admin.apiv1.Api/RegenerateDomainKey"
	// ApiCreateTemplateProcedure is the fully-qualified name of the Api's CreateTemplate RPC.
	ApiCreateTemplateProcedure = "/pkg.kannon.admin.apiv1.Api/CreateTemplate"
	// ApiUpdateTemplateProcedure is the fully-qualified name of the Api's UpdateTemplate RPC.
	ApiUpdateTemplateProcedure = "/pkg.kannon.admin.apiv1.Api/UpdateTemplate"
	// ApiDeleteTemplateProcedure is the fully-qualified name of the Api's DeleteTemplate RPC.
	ApiDeleteTemplateProcedure = "/pkg.kannon.admin.apiv1.Api/DeleteTemplate"
	// ApiGetTemplateProcedure is the fully-qualified name of the Api's GetTemplate RPC.
	ApiGetTemplateProcedure = "/pkg.kannon.admin.apiv1.Api/GetTemplate"
	// ApiGetTemplatesProcedure is the fully-qualified name of the Api's GetTemplates RPC.
	ApiGetTemplatesProcedure = "/pkg.kannon.admin.apiv1.Api/GetTemplates"
)

// ApiClient is a client for the pkg.kannon.admin.apiv1.Api service.
type ApiClient interface {
	GetDomains(context.Context, *connect.Request[apiv1.GetDomainsReq]) (*connect.Response[apiv1.GetDomainsResponse], error)
	GetDomain(context.Context, *connect.Request[apiv1.GetDomainReq]) (*connect.Response[apiv1.GetDomainRes], error)
	CreateDomain(context.Context, *connect.Request[apiv1.CreateDomainRequest]) (*connect.Response[apiv1.Domain], error)
	RegenerateDomainKey(context.Context, *connect.Request[apiv1.RegenerateDomainKeyRequest]) (*connect.Response[apiv1.Domain], error)
	CreateTemplate(context.Context, *connect.Request[apiv1.CreateTemplateReq]) (*connect.Response[apiv1.CreateTemplateRes], error)
	UpdateTemplate(context.Context, *connect.Request[apiv1.UpdateTemplateReq]) (*connect.Response[apiv1.UpdateTemplateRes], error)
	DeleteTemplate(context.Context, *connect.Request[apiv1.DeleteTemplateReq]) (*connect.Response[apiv1.DeleteTemplateRes], error)
	GetTemplate(context.Context, *connect.Request[apiv1.GetTemplateReq]) (*connect.Response[apiv1.GetTemplateRes], error)
	GetTemplates(context.Context, *connect.Request[apiv1.GetTemplatesReq]) (*connect.Response[apiv1.GetTemplatesRes], error)
}

// NewApiClient constructs a client for the pkg.kannon.admin.apiv1.Api service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	apiMethods := apiv1.File_kannon_admin_apiv1_adminapiv1_proto.Services().ByName("Api").Methods()
	return &apiClient{
		getDomains: connect.NewClient[apiv1.GetDomainsReq, apiv1.GetDomainsResponse](
			httpClient,
			baseURL+ApiGetDomainsProcedure,
			connect.WithSchema(apiMethods.ByName("GetDomains")),
			connect.WithClientOptions(opts...),
		),
		getDomain: connect.NewClient[apiv1.GetDomainReq, apiv1.GetDomainRes](
			httpClient,
			baseURL+ApiGetDomainProcedure,
			connect.WithSchema(apiMethods.ByName("GetDomain")),
			connect.WithClientOptions(opts...),
		),
		createDomain: connect.NewClient[apiv1.CreateDomainRequest, apiv1.Domain](
			httpClient,
			baseURL+ApiCreateDomainProcedure,
			connect.WithSchema(apiMethods.ByName("CreateDomain")),
			connect.WithClientOptions(opts...),
		),
		regenerateDomainKey: connect.NewClient[apiv1.RegenerateDomainKeyRequest, apiv1.Domain](
			httpClient,
			baseURL+ApiRegenerateDomainKeyProcedure,
			connect.WithSchema(apiMethods.ByName("RegenerateDomainKey")),
			connect.WithClientOptions(opts...),
		),
		createTemplate: connect.NewClient[apiv1.CreateTemplateReq, apiv1.CreateTemplateRes](
			httpClient,
			baseURL+ApiCreateTemplateProcedure,
			connect.WithSchema(apiMethods.ByName("CreateTemplate")),
			connect.WithClientOptions(opts...),
		),
		updateTemplate: connect.NewClient[apiv1.UpdateTemplateReq, apiv1.UpdateTemplateRes](
			httpClient,
			baseURL+ApiUpdateTemplateProcedure,
			connect.WithSchema(apiMethods.ByName("UpdateTemplate")),
			connect.WithClientOptions(opts...),
		),
		deleteTemplate: connect.NewClient[apiv1.DeleteTemplateReq, apiv1.DeleteTemplateRes](
			httpClient,
			baseURL+ApiDeleteTemplateProcedure,
			connect.WithSchema(apiMethods.ByName("DeleteTemplate")),
			connect.WithClientOptions(opts...),
		),
		getTemplate: connect.NewClient[apiv1.GetTemplateReq, apiv1.GetTemplateRes](
			httpClient,
			baseURL+ApiGetTemplateProcedure,
			connect.WithSchema(apiMethods.ByName("GetTemplate")),
			connect.WithClientOptions(opts...),
		),
		getTemplates: connect.NewClient[apiv1.GetTemplatesReq, apiv1.GetTemplatesRes](
			httpClient,
			baseURL+ApiGetTemplatesProcedure,
			connect.WithSchema(apiMethods.ByName("GetTemplates")),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiClient implements ApiClient.
type apiClient struct {
	getDomains          *connect.Client[apiv1.GetDomainsReq, apiv1.GetDomainsResponse]
	getDomain           *connect.Client[apiv1.GetDomainReq, apiv1.GetDomainRes]
	createDomain        *connect.Client[apiv1.CreateDomainRequest, apiv1.Domain]
	regenerateDomainKey *connect.Client[apiv1.RegenerateDomainKeyRequest, apiv1.Domain]
	createTemplate      *connect.Client[apiv1.CreateTemplateReq, apiv1.CreateTemplateRes]
	updateTemplate      *connect.Client[apiv1.UpdateTemplateReq, apiv1.UpdateTemplateRes]
	deleteTemplate      *connect.Client[apiv1.DeleteTemplateReq, apiv1.DeleteTemplateRes]
	getTemplate         *connect.Client[apiv1.GetTemplateReq, apiv1.GetTemplateRes]
	getTemplates        *connect.Client[apiv1.GetTemplatesReq, apiv1.GetTemplatesRes]
}

// GetDomains calls pkg.kannon.admin.apiv1.Api.GetDomains.
func (c *apiClient) GetDomains(ctx context.Context, req *connect.Request[apiv1.GetDomainsReq]) (*connect.Response[apiv1.GetDomainsResponse], error) {
	return c.getDomains.CallUnary(ctx, req)
}

// GetDomain calls pkg.kannon.admin.apiv1.Api.GetDomain.
func (c *apiClient) GetDomain(ctx context.Context, req *connect.Request[apiv1.GetDomainReq]) (*connect.Response[apiv1.GetDomainRes], error) {
	return c.getDomain.CallUnary(ctx, req)
}

// CreateDomain calls pkg.kannon.admin.apiv1.Api.CreateDomain.
func (c *apiClient) CreateDomain(ctx context.Context, req *connect.Request[apiv1.CreateDomainRequest]) (*connect.Response[apiv1.Domain], error) {
	return c.createDomain.CallUnary(ctx, req)
}

// RegenerateDomainKey calls pkg.kannon.admin.apiv1.Api.RegenerateDomainKey.
func (c *apiClient) RegenerateDomainKey(ctx context.Context, req *connect.Request[apiv1.RegenerateDomainKeyRequest]) (*connect.Response[apiv1.Domain], error) {
	return c.regenerateDomainKey.CallUnary(ctx, req)
}

// CreateTemplate calls pkg.kannon.admin.apiv1.Api.CreateTemplate.
func (c *apiClient) CreateTemplate(ctx context.Context, req *connect.Request[apiv1.CreateTemplateReq]) (*connect.Response[apiv1.CreateTemplateRes], error) {
	return c.createTemplate.CallUnary(ctx, req)
}

// UpdateTemplate calls pkg.kannon.admin.apiv1.Api.UpdateTemplate.
func (c *apiClient) UpdateTemplate(ctx context.Context, req *connect.Request[apiv1.UpdateTemplateReq]) (*connect.Response[apiv1.UpdateTemplateRes], error) {
	return c.updateTemplate.CallUnary(ctx, req)
}

// DeleteTemplate calls pkg.kannon.admin.apiv1.Api.DeleteTemplate.
func (c *apiClient) DeleteTemplate(ctx context.Context, req *connect.Request[apiv1.DeleteTemplateReq]) (*connect.Response[apiv1.DeleteTemplateRes], error) {
	return c.deleteTemplate.CallUnary(ctx, req)
}

// GetTemplate calls pkg.kannon.admin.apiv1.Api.GetTemplate.
func (c *apiClient) GetTemplate(ctx context.Context, req *connect.Request[apiv1.GetTemplateReq]) (*connect.Response[apiv1.GetTemplateRes], error) {
	return c.getTemplate.CallUnary(ctx, req)
}

// GetTemplates calls pkg.kannon.admin.apiv1.Api.GetTemplates.
func (c *apiClient) GetTemplates(ctx context.Context, req *connect.Request[apiv1.GetTemplatesReq]) (*connect.Response[apiv1.GetTemplatesRes], error) {
	return c.getTemplates.CallUnary(ctx, req)
}

// ApiHandler is an implementation of the pkg.kannon.admin.apiv1.Api service.
type ApiHandler interface {
	GetDomains(context.Context, *connect.Request[apiv1.GetDomainsReq]) (*connect.Response[apiv1.GetDomainsResponse], error)
	GetDomain(context.Context, *connect.Request[apiv1.GetDomainReq]) (*connect.Response[apiv1.GetDomainRes], error)
	CreateDomain(context.Context, *connect.Request[apiv1.CreateDomainRequest]) (*connect.Response[apiv1.Domain], error)
	RegenerateDomainKey(context.Context, *connect.Request[apiv1.RegenerateDomainKeyRequest]) (*connect.Response[apiv1.Domain], error)
	CreateTemplate(context.Context, *connect.Request[apiv1.CreateTemplateReq]) (*connect.Response[apiv1.CreateTemplateRes], error)
	UpdateTemplate(context.Context, *connect.Request[apiv1.UpdateTemplateReq]) (*connect.Response[apiv1.UpdateTemplateRes], error)
	DeleteTemplate(context.Context, *connect.Request[apiv1.DeleteTemplateReq]) (*connect.Response[apiv1.DeleteTemplateRes], error)
	GetTemplate(context.Context, *connect.Request[apiv1.GetTemplateReq]) (*connect.Response[apiv1.GetTemplateRes], error)
	GetTemplates(context.Context, *connect.Request[apiv1.GetTemplatesReq]) (*connect.Response[apiv1.GetTemplatesRes], error)
}

// NewApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiHandler(svc ApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiMethods := apiv1.File_kannon_admin_apiv1_adminapiv1_proto.Services().ByName("Api").Methods()
	apiGetDomainsHandler := connect.NewUnaryHandler(
		ApiGetDomainsProcedure,
		svc.GetDomains,
		connect.WithSchema(apiMethods.ByName("GetDomains")),
		connect.WithHandlerOptions(opts...),
	)
	apiGetDomainHandler := connect.NewUnaryHandler(
		ApiGetDomainProcedure,
		svc.GetDomain,
		connect.WithSchema(apiMethods.ByName("GetDomain")),
		connect.WithHandlerOptions(opts...),
	)
	apiCreateDomainHandler := connect.NewUnaryHandler(
		ApiCreateDomainProcedure,
		svc.CreateDomain,
		connect.WithSchema(apiMethods.ByName("CreateDomain")),
		connect.WithHandlerOptions(opts...),
	)
	apiRegenerateDomainKeyHandler := connect.NewUnaryHandler(
		ApiRegenerateDomainKeyProcedure,
		svc.RegenerateDomainKey,
		connect.WithSchema(apiMethods.ByName("RegenerateDomainKey")),
		connect.WithHandlerOptions(opts...),
	)
	apiCreateTemplateHandler := connect.NewUnaryHandler(
		ApiCreateTemplateProcedure,
		svc.CreateTemplate,
		connect.WithSchema(apiMethods.ByName("CreateTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiUpdateTemplateHandler := connect.NewUnaryHandler(
		ApiUpdateTemplateProcedure,
		svc.UpdateTemplate,
		connect.WithSchema(apiMethods.ByName("UpdateTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiDeleteTemplateHandler := connect.NewUnaryHandler(
		ApiDeleteTemplateProcedure,
		svc.DeleteTemplate,
		connect.WithSchema(apiMethods.ByName("DeleteTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiGetTemplateHandler := connect.NewUnaryHandler(
		ApiGetTemplateProcedure,
		svc.GetTemplate,
		connect.WithSchema(apiMethods.ByName("GetTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiGetTemplatesHandler := connect.NewUnaryHandler(
		ApiGetTemplatesProcedure,
		svc.GetTemplates,
		connect.WithSchema(apiMethods.ByName("GetTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pkg.kannon.admin.apiv1.Api/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiGetDomainsProcedure:
			apiGetDomainsHandler.ServeHTTP(w, r)
		case ApiGetDomainProcedure:
			apiGetDomainHandler.ServeHTTP(w, r)
		case ApiCreateDomainProcedure:
			apiCreateDomainHandler.ServeHTTP(w, r)
		case ApiRegenerateDomainKeyProcedure:
			apiRegenerateDomainKeyHandler.ServeHTTP(w, r)
		case ApiCreateTemplateProcedure:
			apiCreateTemplateHandler.ServeHTTP(w, r)
		case ApiUpdateTemplateProcedure:
			apiUpdateTemplateHandler.ServeHTTP(w, r)
		case ApiDeleteTemplateProcedure:
			apiDeleteTemplateHandler.ServeHTTP(w, r)
		case ApiGetTemplateProcedure:
			apiGetTemplateHandler.ServeHTTP(w, r)
		case ApiGetTemplatesProcedure:
			apiGetTemplatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiHandler returns CodeUnimplemented from all methods.
type UnimplementedApiHandler struct{}

func (UnimplementedApiHandler) GetDomains(context.Context, *connect.Request[apiv1.GetDomainsReq]) (*connect.Response[apiv1.GetDomainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.GetDomains is not implemented"))
}

func (UnimplementedApiHandler) GetDomain(context.Context, *connect.Request[apiv1.GetDomainReq]) (*connect.Response[apiv1.GetDomainRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.GetDomain is not implemented"))
}

func (UnimplementedApiHandler) CreateDomain(context.Context, *connect.Request[apiv1.CreateDomainRequest]) (*connect.Response[apiv1.Domain], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.CreateDomain is not implemented"))
}

func (UnimplementedApiHandler) RegenerateDomainKey(context.Context, *connect.Request[apiv1.RegenerateDomainKeyRequest]) (*connect.Response[apiv1.Domain], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.RegenerateDomainKey is not implemented"))
}

func (UnimplementedApiHandler) CreateTemplate(context.Context, *connect.Request[apiv1.CreateTemplateReq]) (*connect.Response[apiv1.CreateTemplateRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.CreateTemplate is not implemented"))
}

func (UnimplementedApiHandler) UpdateTemplate(context.Context, *connect.Request[apiv1.UpdateTemplateReq]) (*connect.Response[apiv1.UpdateTemplateRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.UpdateTemplate is not implemented"))
}

func (UnimplementedApiHandler) DeleteTemplate(context.Context, *connect.Request[apiv1.DeleteTemplateReq]) (*connect.Response[apiv1.DeleteTemplateRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.DeleteTemplate is not implemented"))
}

func (UnimplementedApiHandler) GetTemplate(context.Context, *connect.Request[apiv1.GetTemplateReq]) (*connect.Response[apiv1.GetTemplateRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.GetTemplate is not implemented"))
}

func (UnimplementedApiHandler) GetTemplates(context.Context, *connect.Request[apiv1.GetTemplatesReq]) (*connect.Response[apiv1.GetTemplatesRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pkg.kannon.admin.apiv1.Api.GetTemplates is not implemented"))
}
